export async function load({ fetch, params }) {
  const liveRes = await fetch('/api/live');
  const liveData = await liveRes.json();

  const streamers = (liveData?.data?.list || [])
    .filter((s) => {
      const isMode =
        !params.mode || params.mode === 'both' ? true : s.mode === params.mode;
      const isCharacter = !params.character
        ? true
        : s.character === params.character;
      return isMode && isCharacter;
    })
    .sort((a, b) => a.finish - b.finish || b.level - a.level)
    .map((streamer, i) => ({ ...streamer, rankOverall: i }));

  return {
    streamers,
    updatedAt: liveData?.data?.updatedAt,
  };
}

const MINS = 60;
export const config = {
  isr: {
    // Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
    // Setting the value to `false` means it will never expire.
    expiration: MINS * 5,
  },
};
